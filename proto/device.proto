syntax = "proto3";

// Actual protobuf messages parsing is quite expencive for microcontrollers,
// so we'll use enums as a tag values.
// And we will compose messages based on following format, described below in comments.
enum Markup {
    UNKNOWN_MARKUP = 0;
    MESSAGE_START = 2;
    MESSAGE_END = 3;
}

enum Messages {
    UNKNOWN_MESSAGE = 0;
    HANDSHAKE = 1;
    SENSOR_TYPES = 2;
    SENSORS = 3;
    DIRECTIVE = 4;
    SENSOR_VALUE = 5;
}


// Messages.HANDSHAKE
message HandshakeRequest {
}


// Messages.HANDSHAKE+protocolVersion
message HandshakeResponse {
    int32 protocolVersion = 1;
}


// Messages.SENSOR_TYPES
message SensorTypesRequest {
}

// Messages.SENSOR_TYPES+
// (len(typeToken)+typeToken+len(defaultName)+defaultName+minValue+maxValue)*
message SensorTypesResponse {
    repeated SensorType types = 1;
}
message SensorType {
    string typeToken = 1;
    string defaultName = 2;
    int32 minValue = 3;
    int32 maxValue = 4;
}

// Messages.SENSORS
message SensorsRequest {
}

// Messages.SENSORS+(len(typeToken)+typeToken+id)*
message SensorsResponse {
    repeated Sensor sensors = 1;

}
message Sensor {
    string typeToken = 1;
    int32 id = 2;
}

// Messages.DIRECTIVE+sensorId+startValue+endValue+time
message DirectiveRequest {
    int32 sensorId = 1;
    int32 startValue = 2;
    int32 endValue = 3;
    int32 time = 4;
}

// Messages.DIRECTIVE+accepted
message DirectiveResponse {
    bool accepted = 1;
}
// Messages.SENSOR_VALUE+sensorId
message SensorValueRequest {
    int32 sensorId = 1;
}

// Messages.SENSOR_VALUE+value
message SensorValueResponse {
    int32 value = 1;
}
